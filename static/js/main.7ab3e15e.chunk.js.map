{"version":3,"sources":["compoents/header/header.component.jsx","sortHelpers/mergeSortHelper.js","pages/sort-visualizer/Sort-Visualizer.component.jsx","app.js","index.js"],"names":["Header","onClick","mergeSort","className","mergeSortInterface","array","change","comparing","length","middle","Math","floor","left","slice","right","result","leftIdx","rightIdx","min","idx","push","value","j","concat","merge","changeLogArray","comparingLogArray","SortVisualizer","useState","setArray","useEffect","resetArray","i","randomInt","max","random","timeout","ms","Promise","resolve","setTimeout","a","log","mergeSortHelper","bars","document","getElementsByClassName","color","style","backgroundColor","height","map","item","App","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.7ab3e15e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './header.styels.css'\r\n\r\nconst Header = ({ onClick, mergeSort }) => {\r\n\r\n    return (\r\n        <div className='header'>\r\n            <button onClick={onClick}>Generate new array</button>\r\n            <button onClick={mergeSort}>Merge sort</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","export default function mergeSortInterface(array) {\r\n    const change = []\r\n    const comparing = []\r\n\r\n    function merge(left, right) {\r\n        const result = []\r\n        let leftIdx = 0\r\n        let rightIdx = 0\r\n        let min = left[0].idx;\r\n\r\n        while (leftIdx < left.length && rightIdx < right.length) {\r\n\r\n            comparing.push([left[leftIdx].idx, right[rightIdx].idx])\r\n\r\n            if (left[leftIdx].value < right[rightIdx].value) {\r\n                result.push({ value: left[leftIdx].value, idx: min })\r\n                change.push([left[leftIdx].value, min])\r\n                min++\r\n                leftIdx++\r\n            } else {\r\n                result.push({ value: right[rightIdx].value, idx: min })\r\n                change.push([right[rightIdx].value, min])\r\n                min++\r\n                rightIdx++\r\n            }\r\n        }\r\n\r\n        for (let j = 0; j < left.length - leftIdx; j++) {\r\n            comparing.push(comparing[comparing.length - 1])\r\n            change.push([left[leftIdx + j].value, min])\r\n            min++\r\n        }\r\n        return result.concat(left.slice(leftIdx)).concat(right.slice(rightIdx))\r\n    }\r\n\r\n\r\n    function mergeSort(array) {\r\n        if (array.length === 1) {\r\n            return array\r\n        }\r\n        const middle = Math.floor(array.length / 2)\r\n        const left = array.slice(0, middle)\r\n        const right = array.slice(middle)\r\n\r\n        return merge(\r\n            mergeSort(left),\r\n            mergeSort(right)\r\n        )\r\n    }\r\n\r\n\r\n\r\n    mergeSort(array)\r\n    return ({ changeLogArray: change, comparingLogArray: comparing })\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\nconsole.log(mergeSort([{ value: 5, idx: 0 }, { value: 4, idx: 1 }, { value: 3, idx: 2 }, { value: 7, idx: 3 }, { value: 1, idx: 4 }, { value: 9, idx: 5 }, { value: 8, idx: 6 }]))\r\n\r\nconsole.log('change :', change) */\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../../compoents/header/header.component\";\r\nimport './Sort-Visualizer.styles.css'\r\nimport mergeSortHelper from '../../sortHelpers/mergeSortHelper'\r\n\r\nconst SortVisualizer = () => {\r\n\r\n    const [array, setArray] = useState([{}])\r\n\r\n    useEffect(() => {\r\n        resetArray()\r\n    }, [])\r\n\r\n\r\n    const resetArray = () => {\r\n        const array = []\r\n        for (let i = 0; i < 100; i++) {\r\n            array.push({ value: randomInt(5, 100), idx: i })\r\n        }\r\n        setArray(array)\r\n    }\r\n\r\n\r\n    const randomInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) + min)\r\n    }\r\n\r\n    const onClick = () => {\r\n        resetArray()\r\n    }\r\n\r\n    function timeout(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    const mergeSort = async () => {\r\n        const log = mergeSortHelper(array)\r\n        for (let i = 0; i < log.comparingLogArray.length; i++) {\r\n            const bars = document.getElementsByClassName('bar')\r\n            for (let j = 0; j < 2; j++) {\r\n                await timeout(20);\r\n                const color = j === 0 ? 'red' : 'aqua'\r\n                bars[log.comparingLogArray[i][0]].style.backgroundColor = color\r\n                bars[log.comparingLogArray[i][1]].style.backgroundColor = color\r\n\r\n                if (j === 1) {\r\n                    bars[log.changeLogArray[i][1]].style.height = 6 * log.changeLogArray[i][0] + 'px';\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header mergeSort={mergeSort} onClick={onClick} />\r\n            <div className=\"array\">\r\n                {\r\n                    array.map((item, idx) => {\r\n                        return (\r\n                            <div className=\"bar\" key={idx} style={{ height: `${6 * item.value}px` }}>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default SortVisualizer","import React from \"react\";\r\nimport SortVisualizer from \"./pages/sort-visualizer/Sort-Visualizer.component\";\r\nimport './app.css'\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <SortVisualizer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from \"react\";\r\nimport ReactDOM from 'react-dom'\r\nimport App from './app'\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'))"],"sourceRoot":""}